using System;

using GrammarTests.Util;

using Moq;

using NUnit.Framework;

using Renfrew.Grammar;
using Renfrew.NatSpeakInterop;

namespace GrammarTests.SerializerTests {
   class SimpleGrammar : Grammar {
      public SimpleGrammar(IGrammarService grammarService, INatSpeak natSpeak) : base(grammarService, natSpeak) {

      }

      public override void Dispose() {
         throw new NotImplementedException();
      }

      public override void Initialize() {
         ImportRule("dgndictation");
         AddRule("naming_scheme_x", rule => rule.Say("ape").WithRule("dgndictation"));

         //Load();

         //ActivateRule("naming_scheme_x");
      }
   }

   [TestFixture]
   class DgndictationTests {

      [Test]
      public void SimpleGrammarShouldProduceCorrectBytes() {
         var expectedBytes = new byte[] {
            #region Bytes
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
            0x65, 0x5f, 0x78, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
            0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x67, 0x6e, 0x64,
            0x69, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x61, 0x70, 0x65, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x28, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
            #endregion
         };

         var ser = new GrammarSerializer(false);
         
         var gram = new SimpleGrammar(
            new Mock<IGrammarService>().Object,
            new Mock<INatSpeak>().Object
         );
         gram.Initialize();
         
         var actualBytes = ser.Serialize(gram);

         CustomAssert.ByteArraysAreEqual(
            expectedBytes, actualBytes
         );
      }
   }
}
